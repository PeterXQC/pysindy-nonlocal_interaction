I decided to compile my weekly progress here in case I need to revert any changes.

4/17:
This project has been paused for a while, but now resumed. 


Here's what I did this week:

Apparently the old code assumed only two spatial dimensions are there when doing the on-off coefficient computation. This has been fixed. 

We used to have spatial dimensions opened up into one long vector. x_full has each spatial dimension stand along, so I opened it back up. I kept the original approach of reshaping spatial dims into one big vector, then reshape back to leverage numpy's fast vector product. 

Typo in old code fixed


I found these questions: 
In current example notebooks, when only 1 spatial dimension is present, we have shape (64,) instead of (64, 1). Should we enforce them to have shape (64, 1) to match our assumption that the last axis is an indexing on features, or should we add flexibility in our code?
Impact of this issue:
	Expected number of nonlocal features.
	Whether to -1 when counting number of spatial dimensions in setup_subdomains.

How does pysindy deal with multiple trajectories? Do we need to implement anything or would pysindy just throw different trajectories in our feature_lib?

Is the last dimension of spatial grid an indexing on the number of spatial axis, or the number of features?

We might need to compute the number of features in fit separately even though many of these values can be reused in actual nonlocal computation, or can we pass these paramters into nonlocal computation from fit directly? or should we save them as global variables?

I thought of a way to see if nonlocal is behaving as expected by seeing where the matrix has value and where we have 0. However, do we expect a matrix to have all 0 at some t and feature?